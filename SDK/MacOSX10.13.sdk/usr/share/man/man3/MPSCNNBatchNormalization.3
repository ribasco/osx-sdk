.TH "MPSCNNBatchNormalization" 3 "Thu Feb 8 2018" "Version MetalPerformanceShaders-100" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCNNBatchNormalization
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNBatchNormalization\&.h>\fP
.PP
Inherits \fBMPSCNNKernel\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:dataSource:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceImage:batchNormalizationState:destinationImage:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeBatchToCommandBuffer:sourceImages:batchNormalizationState:destinationImages:\fP"
.br
.ti -1c
.RI "(\fBMPSImage\fP *__nonnull) \- \fBencodeToCommandBuffer:sourceImage:batchNormalizationState:\fP"
.br
.ti -1c
.RI "(\fBMPSImageBatch\fP *__nonnull) \- \fBencodeBatchToCommandBuffer:sourceImages:batchNormalizationState:\fP"
.br
.ti -1c
.RI "(\fBMPSCNNBatchNormalizationState\fP *__nullable) \- \fBresultStateForSourceImages:\fP"
.br
.ti -1c
.RI "(\fBMPSCNNBatchNormalizationState\fP *__nullable) \- \fBtemporaryResultStateForCommandBuffer:sourceImages:\fP"
.br
.ti -1c
.RI "(void) \- \fBreloadDataSource:\fP"
.br
.ti -1c
.RI "(void) \- \fBreloadGammaAndBetaWithCommandBuffer:gammaAndBetaState:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBnumberOfFeatureChannels\fP"
.br
.ti -1c
.RI "float \fBepsilon\fP"
.br
.ti -1c
.RI "id< \fBMPSCNNBatchNormalizationDataSource\fP > \fBdataSource\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework  \fBMPSCNNBatchNormalization\fP normalizes input images using per-channel means and variances\&.
.PP
for (c = 0; c < numberOfFeatureChannels; ++c) { input_image = in(:,:,c,:); output_image = (input_image - mean[c]) * gamma[c] / sqrt(variance[c] + epsilon) + beta[c]; out(:,:,c,:) = output_image; } 
.SH "Method Documentation"
.PP 
.SS "\- (\fBMPSImageBatch\fP * __nonnull) encodeBatchToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages(\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState"
Encode this kernel to a command buffer for a batch of images using a batch normalization state\&. Create a batch of MPSImages to hold the result and return it\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid command buffer to receive the kernel\&. 
.br
\fIsourceImages\fP The batch of source images\&. 
.br
\fIbatchNormalizationState\fP \fBA\fP \fBMPSCNNBatchNormalizationState\fP containing weights and/or statistics to use for the batch normalization\&.
.RE
.PP
\fBReturns:\fP
.RS 4
An MPSImageBatch containing the output of the graph\&. 
.RE
.PP

.SS "\- (void) encodeBatchToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages(\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState(\fBMPSImageBatch\fP *__nonnull) destinationImages"
Encode this kernel to a command buffer for a batch of images using a batch normalization state\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid command buffer to receive the kernel\&. 
.br
\fIsourceImages\fP The batch of source images\&. 
.br
\fIbatchNormalizationState\fP \fBA\fP \fBMPSCNNBatchNormalizationState\fP containing weights and/or statistics to use for the batch normalization\&. 
.br
\fIdestinationImages\fP The batch of images to contain the normalized and scaled result images\&. 
.RE
.PP

.SS "\- (\fBMPSImage\fP * __nonnull) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState"
Encode this kernel to a command buffer for a single image using a batch normalization state\&. Create a \fBMPSImage\fP to hold the result and return it\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid command buffer to receive the kernel\&. 
.br
\fIsourceImage\fP The source \fBMPSImage\fP\&. 
.br
\fIbatchNormalizationState\fP \fBA\fP \fBMPSCNNBatchNormalizationState\fP containing weights and/or statistics to use for the batch normalization\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An \fBMPSImage\fP containing the output of the graph\&. 
.RE
.PP

.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(\fBMPSCNNBatchNormalizationState\fP *__nonnull) batchNormalizationState(\fBMPSImage\fP *__nonnull) destinationImage"
Encode this kernel to a command buffer for a single image using a batch normalization state\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP \fBA\fP valid command buffer to receive the kernel\&. 
.br
\fIsourceImage\fP The source \fBMPSImage\fP\&. 
.br
\fIbatchNormalizationState\fP \fBA\fP \fBMPSCNNBatchNormalizationState\fP containing weights and/or statistics to use for the batch normalization\&. 
.br
\fIdestinationImage\fP An \fBMPSImage\fP to contain the resulting normalized and scaled image\&. 
.RE
.PP

.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  While the standard NSSecureCoding/NSCoding method -initWithCoder: should work, since the file can't know which device your data is allocated on, we have to guess and may guess incorrectly\&. To avoid that problem, use a subclass of NSCoder that implements the <MPSDeviceProvider> protocol to tell MPS the MTLDevice to use\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSKernel\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSKernel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP new \fBMPSCNNBatchNormalization\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSCNNKernel\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Use initWithDevice:dataSource instead 
.PP
Reimplemented from \fBMPSCNNKernel\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(nonnull id< \fBMPSCNNBatchNormalizationDataSource\fP >) dataSource"
Initializes a batch normalization kernel using a data source\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The MTLDevice on which this filter will be used 
.br
\fIdataSource\fP \fBA\fP pointer to a object that conforms to the \fBMPSCNNBatchNormalizationDataSource\fP protocol\&. The data source provides filter weights and bias terms and, optionally, image statistics which may be used to perform the normalization\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBA\fP valid \fBMPSCNNBatchNormalization\fP object or nil, if failure\&. 
.RE
.PP

.SS "\- (void) reloadDataSource: (__nonnull id< \fBMPSCNNBatchNormalizationDataSource\fP >) dataSource"
Reinitialize the filter using a data source\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataSource\fP The data source which will provide the weights and, optionally, the image batch statistics with which to normalize\&. 
.RE
.PP

.SS "\- (void) reloadGammaAndBetaWithCommandBuffer: (__nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSCNNNormalizationGammaAndBetaState\fP *__nonnull) gammaAndBetaState"
Reload data using new gamma and beta terms contained within an \fBMPSCNNInstanceNormalizationGradientState\fP object\&.
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP The command buffer on which to encode the reload\&.
.br
\fIgammaAndBetaState\fP The state containing the updated weights which are to be reloaded\&. 
.RE
.PP

.SS "\- (\fBMPSCNNBatchNormalizationState\fP * __nullable) resultStateForSourceImages: (\fBMPSImageBatch\fP *__nonnull) sourceImages"
Return an \fBMPSCNNBatchNormalizationState\fP object which may be used with a \fBMPSCNNBatchNormalization\fP filter\&. 
.SS "\- (\fBMPSCNNBatchNormalizationState\fP * __nullable) temporaryResultStateForCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImageBatch\fP *__nonnull) sourceImages"
Return a temporary \fBMPSCNNBatchNormalizationState\fP object which may be used with a \fBMPSCNNBatchNormalization\fP filter\&. 
.SH "Property Documentation"
.PP 
.SS "\- (id<\fBMPSCNNBatchNormalizationDataSource\fP>) dataSource\fC [read]\fP, \fC [nonatomic]\fP, \fC [retain]\fP"
The data source the batch normalization was initialized with 
.SS "\- epsilon\fC [read]\fP, \fC [write]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The epsilon value used in the batch normalization formula to bias the variance when normalizing\&. 
.SS "\- numberOfFeatureChannels\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of feature channels in an image to be normalized\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
